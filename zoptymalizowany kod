#include <iostream>
#include <fstream>
#include <cstdlib>
#include <vector>
#include <string>
#include <algorithm>
#include <chrono>
#include <iomanip>
#include <sstream>

using namespace std;

// Funkcja generująca dane do pliku
void generujDane(int n, const string& nazwa_pliku) {
    ofstream plik(nazwa_pliku);
    if (!plik) {
        cerr << "Blad przy otwieraniu pliku do zapisu!" << endl;
        return;
    }

    for (int i = 0; i < n; ++i) {
        plik << rand() % 1000 << " ";  // Losowe liczby w zakresie 0 - 999
    }

    plik.close();
}

// Funkcja do znajdowania największej liczby przez połączenie elementów
string znajdzNajwiekszaLiczbe(vector<int>& liczby) {
    vector<pair<string, int>> liczby_str;
    for (int liczba : liczby) {
        liczby_str.emplace_back(to_string(liczba), liczba);
    }

    sort(liczby_str.begin(), liczby_str.end(), [](const pair<string, int>& a, const pair<string, int>& b) {
        return a.first + b.first > b.first + a.first;
    });

    string wynik;
    for (const auto& p : liczby_str) {
        wynik += p.first;
    }

    return wynik;
}

// Funkcja do wczytywania danych z pliku
vector<int> wczytajDane(const string& nazwaPliku) {
    ifstream plik(nazwaPliku);
    vector<int> liczby;
    int liczba;

    if (plik.is_open()) {
        while (plik >> liczba) {
            liczby.push_back(liczba);
        }
        plik.close();
    } else {
        cerr << "Nie udało się otworzyć pliku: " << nazwaPliku << endl;
    }

    return liczby;
}

// Funkcja do formatowania czasu z dynamiczną precyzją
string sformatujCzas(double czasWykonania) {
    ostringstream oss;
    if (czasWykonania < 0.001) {
        oss << fixed << setprecision(9);
    } else {
        oss << fixed << setprecision(6);
    }
    oss << czasWykonania;
    return oss.str();
}

// Funkcja do zapisu wyniku do pliku
void zapiszWynik(const string& nazwaPliku, const string& wynik, double czasWykonania, const vector<int>& daneWejsciowe) {
    ofstream plik(nazwaPliku, ios::app);

    if (plik.is_open()) {
        auto teraz = chrono::system_clock::now();
        time_t czas = chrono::system_clock::to_time_t(teraz);

        plik << "Dane wejsciowe: ";
        for (int liczba : daneWejsciowe) {
            plik << liczba << " ";
        }
        plik << endl;

        plik << "Wynik: " << wynik << endl;
        plik << "Czas wykonania: " << sformatujCzas(czasWykonania) << " sekundy" << endl;
        plik << "Data i godzina: " << ctime(&czas);
        plik << "-------------------------------" << endl;

        plik.close();
    } else {
        cerr << "Nie udalo się zapisać wynikow do pliku: " << nazwaPliku << endl;
    }
}

void testKod(int n) {
    vector<int> liczby;
    // Generuj dane wejściowe
    generujDane(n, "dane.txt");  // Funkcja generująca dane (do zaimplementowania)
    
    // Odczyt danych
    liczby = wczytajDane("dane.txt");

    if (liczby.empty()) {
        cerr << "Brak danych!" << endl;
        return;
    }

    // Pomiar czasu wykonania
    auto start = chrono::high_resolution_clock::now();
    string wynik = znajdzNajwiekszaLiczbe(liczby);
    auto end = chrono::high_resolution_clock::now();
    chrono::duration<double> czas_trwania = end - start;

    cout << "Czas wykonania dla " << n << " danych: " << czas_trwania.count() << " sekundy" << endl;
}

int main() {
    // Testowanie różnych rozmiarów danych
    testKod(1000);
    testKod(10000);
    testKod(100000);
    testKod(1000000);

    return 0;
}
